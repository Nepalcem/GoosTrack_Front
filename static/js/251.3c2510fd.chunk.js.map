{"version":3,"file":"static/js/251.3c2510fd.chunk.js","mappings":"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","sources":["components/Calendar/CalendarToolbar/PeriodPaginator/PeriodPaginator.styled.jsx","components/Calendar/CalendarToolbar/PeriodPaginator/PeriodPaginator.jsx","components/Calendar/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.styled.jsx","components/Calendar/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.jsx","components/Calendar/CalendarToolbar/CalendarToolbar/CalendarToolbar.styled.jsx","components/Calendar/CalendarToolbar/CalendarToolbar/CalendarToolbar.jsx","pages/CalendarPage/CalendarPage.jsx","../node_modules/date-fns/esm/addMonths/index.js","../node_modules/date-fns/esm/getTime/index.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const PeriodPaginatorDiv = styled.div`\n  display: flex;\n\n  @media screen and (min-width: 375px) {\n    justify-content: space-between;\n    margin-bottom: 18px;\n  }\n  @media screen and (min-width: 768px) {\n    margin-bottom: 0;\n  }\n`;\n\nexport const DisplayDataDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 8px;\n  padding: 6px 12px 6px 12px;\n  border-radius: 8px;\n  background-color: #3e85f3;\n\n  font-family: Inter;\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 18px;\n  letter-spacing: 0em;\n  text-align: center;\n  color: #ffffff;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nexport const ButtonsChangePeriodDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  border-radius: 8px;\n  overflow: hidden;\n`;\nexport const Svg = styled.svg`\n  width: 16px;\n  height: 16px;\n\n  @media screen and (min-width: 768px) {\n    width: 18px;\n    height: 18px;\n  }\n`;\n\nexport const ButtonChangeDate = styled.button`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n\n  padding: 11px 16px;\n  @media screen and (min-width: 768px) {\n    padding: 12px 16px;\n  }\n\n  background-color: var(--color-btn-change-day);\n\n  cursor: pointer;\n  border: 0;\n\n  &:hover {\n    opacity: 0.8;\n  }\n\n  border-right: ${({ border }) =>\n    border === 'right' ? '1px solid rgba(220, 227, 229, 0.5)' : 0};\n\n  &:hover {\n    ${Svg} {\n      stroke: var(--color-btn-stroke-active);\n    }\n  }\n\n  stroke: ${({ direction, place }) =>\n    (place === 'left' && direction === 'back') ||\n    (place === 'right' && direction === 'forvard')\n      ? 'var(--color-btn-stroke-active)'\n      : 'var(--color-btn-stroke)'};\n`;\n","import React from 'react';\nimport { format } from 'date-fns';\nimport { useState } from 'react';\n\nimport {\n  PeriodPaginatorDiv,\n  DisplayDataDiv,\n  ButtonChangeDate,\n  ButtonsChangePeriodDiv,\n  Svg,\n} from './PeriodPaginator.styled';\nconst PeriodPaginator = ({ date, period, onClick }) => {\n  const [direction, setDirection] = useState('forvard'); // направление выбора даты back or forvard\n  return (\n    <PeriodPaginatorDiv>\n      {/* отображение даты в нужном формате */}\n      <DisplayDataDiv>\n        {period === 'month' && <div>{format(date, 'MMMM yyyy')}</div>}\n        {period === 'day' && <div>{format(date, 'dd MMM yyyy')}</div>}\n      </DisplayDataDiv>\n      {/* кнопки вібора периода */}\n      <ButtonsChangePeriodDiv>\n        <ButtonChangeDate\n          direction={direction}\n          place={'left'}\n          border=\"right\"\n          onClick={() => {\n            setDirection('back');\n            onClick(-1, period);\n          }}\n        >\n          <Svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"1.5\"\n              d=\"M10 12 6 8l4-4\"\n            />\n          </Svg>\n        </ButtonChangeDate>\n        <ButtonChangeDate\n          direction={direction}\n          place={'right'}\n          onClick={() => {\n            setDirection('forvard');\n            onClick(1, period);\n          }}\n        >\n          <Svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"1.5\"\n              d=\"m6 12 4-4-4-4\"\n            />\n          </Svg>\n        </ButtonChangeDate>\n      </ButtonsChangePeriodDiv>\n    </PeriodPaginatorDiv>\n  );\n};\nexport default PeriodPaginator;\n\n// \"1. Компонент отримує в пропсах дату, тип періоду та метод для зміни дати.\n// 2. Компонент рендерить розмітку з відформатованим періодом дат в залежності від обраних дати та періоду та блок з кнопками для зміни дати, що збільшують або зменшують період до наступного/попереднього відповідно.\n// 3. Клік по кнопках змінює дату в залежності від типу періоду:\n//  - month - залишає число поточного дня місяця змінюючи місяць/рік попереднього/наступного місяця\n//  - day - змінює дату поточного дня  на дату попереднього/наступного дня\n// 4. Компонент форматує період:\n//  - month - MARCH 2023\n//  - day - 6 MARCH 2023\"\n","import styled from 'styled-components';\n\nexport const PeriodTypeSelectDiv = styled.div`\n  display: flex;\n`;\n\nexport const ButtonChangePeriod = styled.button`\n  border: 0;\n  border-radius: ${({ place }) =>\n    place === 'left' ? '8px 0px 0px 8px' : '0px 8px 8px 0px'};\n\n  border-right: ${({ place }) =>\n    place === 'left' ? '1px solid rgba(62, 133, 243, 0.2)' : 0};\n\n  padding: ${({ place }) =>\n    place === 'left' ? '8px 16px 8px 16px' : '8px 26px 8px 26px'};\n\n  font-family: Inter;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 18px;\n  letter-spacing: 0em;\n  text-align: center;\n  \n  &:hover {\n    opacity: 0.8;;\n  }\n\n  // color: #3e85f3;\n  color: ${({ place, period }) =>\n    (place === 'left' && period === 'month') ||\n    (place === 'right' && period === 'day')\n      ? 'var(--color-button-day-title)'\n      : 'var(--color-button-month-title)'};\n\n\n  background-color: ${({ place, period }) =>\n    (place === 'left' && period === 'month') ||\n    (place === 'right' && period === 'day')\n      ? 'var(--color-brg-button-day)'\n      : 'var(--color-brg-button-month)'};\n\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n","import React from 'react';\n//import { useState } from 'react';\nimport {\n  PeriodTypeSelectDiv,\n  ButtonChangePeriod,\n} from './PeriodTypeSelect.styled';\n\nconst PeriodTypeSelect = ({ onClick, period }) => {\n\n  return (\n    <PeriodTypeSelectDiv>\n      <ButtonChangePeriod\n        place=\"left\"\n        period={period}\n        onClick={() => {\n       \n        \n          onClick('month');\n        }}\n      >\n        Month\n      </ButtonChangePeriod>\n      <ButtonChangePeriod\n        place=\"right\"\n        period={period}\n        onClick={() => {\n        \n          onClick('day');\n        }}\n      >\n        Day\n      </ButtonChangePeriod>\n    </PeriodTypeSelectDiv>\n  );\n};\nexport default PeriodTypeSelect;\n// \"1. Компонент рендерить блок навігації для переадресацї юзера на таблицю з задачами відповідно до обраного типу періоду day | month.\n// 2. Кнопка що вказує поточний тип обраного періоду має активні стилі, як показано на макеті.\"\n","import styled from 'styled-components';\n\nexport const CalendarToolbarDiv = styled.div`\n  display: flex;\n  \n  @media screen and (min-width: 375px) {\n    flex-direction: column;\n    margin-top: 64px;\n  }\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n    justify-content: space-between;\n\n    margin-top: 64px;\n  }\n  @media screen and (min-width: 1440px) {\n    margin-top: 38px;\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { addMonths, getTime, addDays, format } from 'date-fns';\n\nimport { useNavigate } from 'react-router-dom';\n\nimport PeriodPaginator from '../PeriodPaginator/PeriodPaginator';\nimport PeriodTypeSelect from '../PeriodTypeSelect/PeriodTypeSelect';\n\nimport { CalendarToolbarDiv } from './CalendarToolbar.styled';\n\nconst CalendarToolbar = ({ onClickDay }) => {\n  const navigate = useNavigate();\n\n  const [date, setDate] = useState(\n    parseInt(localStorage.getItem('date')) || getTime(new Date())\n  ); //за промовчанням поточна дата\n  const [period, setPeriod] = useState(\n    localStorage.getItem('period') || 'month'\n  ); //за промовчанням period month\n  //сохраняем дату и период в localStorage\n  localStorage.date = date;\n  localStorage.period = period;\n\n  // форматируем текущую дату из стейта для URL\n  const CurrentDate = format(date, 'yyyy-MM').split(' ').join('');\n  const CurrentDay = format(date, 'yyyy-MM-dd').split(' ').join('');\n  // меняем URL взависимости от периода и даті\n  useEffect(() => {\n    if (period === 'month') {\n      navigate(`/calendar/month/${CurrentDate}`);\n    } else {\n      navigate(`/calendar/day/${CurrentDay}`);\n    }\n  }, [navigate, CurrentDate, date, period, CurrentDay]);\n\n  // если есть выбор дня в CalendarTable - меняем стейт для перехода\n  useEffect(() => {\n    if (onClickDay !== null) {\n      setDate(getTime(new Date(`${onClickDay}`)));\n      setPeriod('day');\n    }\n  }, [onClickDay]);\n  /////////////////////////////\n\n  //функція зміни місяця вперед чи назад\n  const onChangeMonthOrDay = (step, period) => {\n    let newDate = null;\n    if (period === 'month') {\n      newDate = addMonths(date, step); //змінюємо місяць у будь-який бік\n    }\n    if (period === 'day') {\n      newDate = addDays(date, step); //змінюємо дату у будь-який бік\n    }\n\n    const millisec = getTime(newDate); //переводимо в millisec для форматування та запису в стейт\n    setDate(millisec); //пишем в стейт\n  };\n\n  // функция выбора периода month or day\n  const onChangePeriod = newPeriod => setPeriod(newPeriod);\n\n  return (\n    <CalendarToolbarDiv>\n      <PeriodPaginator\n        date={date}\n        period={period}\n        onClick={onChangeMonthOrDay}\n      />\n      <PeriodTypeSelect period={period} onClick={onChangePeriod} />\n    </CalendarToolbarDiv>\n  );\n};\nexport default CalendarToolbar;\n","import React, { useEffect, useState } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport CalendarToolbar from 'components/Calendar/CalendarToolbar/CalendarToolbar/CalendarToolbar';\nimport { fetchAllTasks } from 'redux/tasks/tasksOperation';\nimport { editTitle } from 'redux/title/titleSlice';\n\nconst CalendarPage = () => {\n  // стейт для передачи дня по клику в таблице месяца CalendarTable\n  const [onClickDay, setOnClickDay] = useState(null);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(editTitle('Calendar'));\n  });\n\n  useEffect(() => {\n    // Dispatch the loadTasks for Current Month action when the component mounts for one first time\n    dispatch(fetchAllTasks({}));\n  }, [dispatch]);\n\n  return (\n    <div>\n      <CalendarToolbar onClickDay={onClickDay} />\n\n      <Outlet context={[onClickDay, setOnClickDay]} />\n    </div>\n  );\n};\n\nexport default CalendarPage;\n// \"1. Компонент рендериться на маршрут /calendar.\n// 2. При першому вході на сторінку компонент виконує переадресацію на розширений маршрут /calendar/month/:currentDate для відображення календяря місяця\n// 2. Сторінка повинна відображатись відповідно до макету на 3х розширеннях(375, 768, 1440)\n// 3. На сторінці знаходиться модуль CalendarToolbar - з яким користувач може обрати тип періоду, та його інтервал\n// 4. На сторінці відображаеться один з модулів періоду дат календаря:\n//  - ChoosedMonth - дозволяє подивитись всі задачі на місяць, перейти на сторінку одного дня ChoosedDay.\n//  - ChoosedDay - дозволяє створювати задачі та розділити ці задачі  на групи по ступеню їх виконання.\n// 5. При новому відвідуванні додатку та першому вході на сторінку відображаеться модуль ChoosedMonth з розкладкою комірок з датами поточного місяця.\n// 6. На сторінці повинен здійснюватись запит за завданнями, якщо вони відсутні в глобальному стейті\n// 7. Успіх - дані записуються у відповідний стейт\n// 8. Помилка - користувачу показується відповідне пуш-повідомлення\"\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  var dayOfMonth = date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */\nexport default function getTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  return timestamp;\n}"],"names":["PeriodPaginatorDiv","styled","DisplayDataDiv","ButtonsChangePeriodDiv","Svg","ButtonChangeDate","border","direction","place","date","period","onClick","useState","setDirection","format","xmlns","fill","strokeLinecap","strokeLinejoin","strokeWidth","d","PeriodTypeSelectDiv","ButtonChangePeriod","CalendarToolbarDiv","onClickDay","navigate","useNavigate","parseInt","localStorage","getItem","getTime","Date","setDate","setPeriod","CurrentDate","split","join","CurrentDay","useEffect","step","newDate","addMonths","addDays","millisec","newPeriod","setOnClickDay","dispatch","useDispatch","editTitle","fetchAllTasks","context","dirtyDate","dirtyAmount","requiredArgs","arguments","toDate","amount","toInteger","isNaN","NaN","dayOfMonth","getDate","endOfDesiredMonth","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","timestamp"],"sourceRoot":""}