{"version":3,"file":"static/js/917.1d11cd06.chunk.js","mappings":"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","sources":["components/Calendar/CalendarToolbar/PeriodPaginator/PeriodPaginator.styled.jsx","components/Statistics/StatisticsSection.styled.jsx","components/Statistics/PaginatorStatistics/PaginatorStatistics.styled.jsx","components/Statistics/PaginatorStatistics/StatisticsDatepicker.styled.js","components/Statistics/PaginatorStatistics/PaginatorStatistics.jsx","components/Statistics/StatisticsChart/StatisticsChart.styled.jsx","components/Statistics/StatisticsChart/StatisticsChart.jsx","components/Statistics/StatisticsSection.jsx","pages/StatisticsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const PeriodPaginatorDiv = styled.div`\n  display: flex;\n\n  @media screen and (min-width: 375px) {\n    justify-content: space-between;\n    margin-bottom: 18px;\n  }\n  @media screen and (min-width: 768px) {\n    margin-bottom: 0;\n  }\n`;\n\nexport const DisplayDataDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 8px;\n  padding: 6px 12px 6px 12px;\n  border-radius: 8px;\n  background-color: #3e85f3;\n\n  font-family: Inter;\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 18px;\n  letter-spacing: 0em;\n  text-align: center;\n  color: #ffffff;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nexport const ButtonsChangePeriodDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  border-radius: 8px;\n  overflow: hidden;\n`;\nexport const Svg = styled.svg`\n  width: 16px;\n  height: 16px;\n\n  @media screen and (min-width: 768px) {\n    width: 18px;\n    height: 18px;\n  }\n`;\n\nexport const ButtonChangeDate = styled.button`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n\n  padding: 11px 16px;\n  @media screen and (min-width: 768px) {\n    padding: 12px 16px;\n  }\n\n  background-color: var(--color-btn-change-day);\n\n  cursor: pointer;\n  border: 0;\n\n  &:hover {\n    opacity: 0.8;\n  }\n\n  border-right: ${({ border }) =>\n    border === 'right' ? '1px solid rgba(220, 227, 229, 0.5)' : 0};\n\n  &:hover {\n    ${Svg} {\n      stroke: var(--color-btn-stroke-active);\n    }\n  }\n\n  stroke: ${({ direction, place }) =>\n    (place === 'left' && direction === 'back') ||\n    (place === 'right' && direction === 'forvard')\n      ? 'var(--color-btn-stroke-active)'\n      : 'var(--color-btn-stroke)'};\n`;\n","import styled from 'styled-components';\nimport { whiteColor } from 'utils/variables';\n\nexport const StatisticsSectionContainer = styled.div`\n  // background-color: ${whiteColor};\n\n  background-color: var(--color-btn-change-day);\n  margin-top: 64px;\n  width: 335px;\n\n  padding: 28px 14px;\n  border-radius: 16px;\n  width: 100%;\n\n  @media screen and (min-width: 768px) {\n    width: 704px;\n\n    padding: 132px 32px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    /* width: 1087px; */\n    width: 100%;\n    margin-top: 32px;\n    padding: 134px 113px 14px 113px;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const PeriodPaginatorContainer = styled.div`\n  @media screen and (min-width: 768px) {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  @media screen and (min-width: 1440px) {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 40px;\n  }\n`;\n\nexport const ButtonsContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  @media screen and (min-width: 768px) {\n    gap: 10px;\n  }\n`;\n\nexport const CalendarButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 8px;\n  padding: 6px 12px 6px 12px;\n  border-radius: 8px;\n  background-color: #3e85f3;\n\n  font-family: Inter;\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 18px;\n  letter-spacing: 0em;\n  text-align: center;\n  color: #ffffff;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 22px;\n  margin: 20px 0 0 10px;\n  list-style-type: none;\n  padding-left: 0;\n\n  @media screen and (min-width: 768px) {\n    padding-bottom: 15px;\n  }\n`;\n\nexport const ListItem = styled.li`\n  position: relative;\n  padding-left: 10px;\n  font-size: 14px;\n  color:var(--color-calendar-day);\n\n  ::before {\n    content: '•';\n    position: absolute;\n    top: 40%;\n    transform: translateY(-50%);\n    font-size: 35px;\n  }\n\n  &:nth-child(1)::before {\n    color: #ffd2dd;\n    left: -20%;\n  }\n\n  &:nth-child(2)::before {\n    color: #3e85f3;\n    left: -15%;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n","import 'react-datepicker/dist/react-datepicker.css';\nimport styled from 'styled-components';\nimport { primaryColor, whiteColor } from 'utils/variables';\n\nexport const StyledStatisticsDatepicker = styled.div`\n  .react-datepicker__wrapper {\n    position: relative;\n  }\n  .react-datepicker {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-1%, 0%);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 327px;\n    height: 354px;\n    padding: 13px 0px 0px 0px;\n    background-color: #3e85f3;\n    font-family: Inter;\n    border-radius: 16px;\n  }\n  .react-datepicker__month-container {\n    float: inherit;\n    box-sizing: border-box;\n    width: 100%;\n  }\n  .react-datepicker__header {\n    position: relative;\n    background-color: #3e85f3;\n  }\n  .react-datepicker__day-names {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 8px 16px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.4);\n  }\n  .react-datepicker__header:not(.react-datepicker__header--has-time-select) {\n    border-bottom: 0px;\n    padding: 0;\n  }\n  .react-datepicker__day\n    react-datepicker__day--018.react-datepicker__day--selected\n    react-datepicker__day--today {\n    outline: none;\n    border: none;\n  }\n  .react-datepicker__current-month {\n    font-family: Inter;\n    font-size: 20px;\n    font-style: normal;\n    font-weight: 600;\n    line-height: 24px;\n    text-align: center;\n    color: white;\n  }\n  .react-datepicker__day-name {\n    margin: 0;\n    padding: 8px 8px;\n    font-family: Inter;\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 600;\n    line-height: 18px;\n    text-align: center;\n    color: white;\n  }\n  .react-datepicker__navigation {\n    margin-top: 24px;\n    color: white;\n  }\n  .react-datepicker__navigation--previous {\n    left: 7px;\n    width: 18px;\n    height: 18px;\n  }\n  .react-datepicker__navigation--next {\n    right: 7px;\n    width: 18px;\n    height: 18px;\n  }\n  .react-datepicker__navigation-icon::before:hover:focus {\n    border-color: white;\n  }\n  .react-datepicker__week {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    color: white;\n  }\n  .react-datepicker__day {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n    flex-shrink: 0;\n    margin: 0;\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    color: white;\n    font-family: Inter;\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 18px;\n    text-align: center;\n  }\n  .react-datepicker__month {\n    display: flex;\n    gap: 12px;\n    flex-direction: column;\n    justify-content: space-between;\n    padding: 16px 16px 0px 16px;\n    margin: 0;\n  }\n  .react-datepicker__day--selected {\n    background-color: white;\n    color: #3e85f3;\n    font-size: 14px;\n  }\n  .react-datepicker__day--selected:hover {\n    border-radius: 50%;\n    background-color: white;\n  }\n  .react-datepicker__day:hover {\n    border-radius: 50%;\n    background-color: white;\n    color: #3e85f3;\n  }\n  .react-datepicker__day--keyboard-selected {\n    border-radius: 50%;\n    background-color: white;\n    color: #3e85f3;\n  }\n  .react-datepicker__day--weekend {\n    opacity: 50%;\n  }\n  .react-datepicker__day--outside-month {\n    background-color: transparent;\n    pointer-events: none;\n    opacity: 0;\n  }\n  .react-datepicker__view-calendar-icon input {\n    padding: 6px 10px 5px 13px;\n  }\n  .react-datepicker__triangle {\n    visibility: hidden;\n  }\n\n  .react-datepicker__input-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .react-datepicker__input-container input {\n    cursor: pointer;\n    caret-color: transparent;\n    display: block;\n    border: none;\n    background-color: ${primaryColor};\n    color: ${whiteColor};\n    outline: none;\n    padding: 8px 12px;\n    font-size: 14px;\n    line-height: calc(18 / 14);\n    font-weight: 700;\n    font-family: Inter;\n    max-width: 170px;\n    @media screen and (min-width: 768px) {\n      max-width: 200px;\n      padding: 10px 12px;\n      font-size: 16px;\n    }\n    border-radius: 8px;\n  }\n`;\n","import { useState } from 'react';\nimport { addDays, getTime } from 'date-fns';\nimport {\n  ButtonsContainer,\n  // CalendarButton,\n  List,\n  ListItem,\n  PeriodPaginatorContainer,\n} from './PaginatorStatistics.styled';\n\nimport {\n  ButtonChangeDate,\n  ButtonsChangePeriodDiv,\n  Svg,\n} from 'components/Calendar/CalendarToolbar/PeriodPaginator/PeriodPaginator.styled';\nimport DatePicker from 'react-datepicker';\nimport { StyledStatisticsDatepicker } from './StatisticsDatepicker.styled';\n\nconst PeriodPaginatorStatistics = ({ date, setDate }) => {\n  const [direction, setDirection] = useState('forvard'); // направление выбора даты back or forvard\n\n  const onClickBtn = (step, period) => {\n    let newDate = null;\n    if (period === 'day') {\n      newDate = addDays(date, step);\n    }\n    const millisec = getTime(newDate);\n    setDate(millisec);\n  };\n\n  return (\n    <PeriodPaginatorContainer>\n      <ButtonsContainer>\n        <StyledStatisticsDatepicker>\n          <DatePicker\n            calendarStartDay={1}\n            selected={date}\n            onChange={date => {\n              setDate(date);\n            }}\n            dateFormat=\"dd MMMM yyyy\"\n          />\n        </StyledStatisticsDatepicker>\n        <ButtonsChangePeriodDiv>\n          <ButtonChangeDate\n            direction={direction}\n            place={'left'}\n            border=\"right\"\n            onClick={() => {\n              setDirection('back');\n              onClickBtn(-1, 'day');\n            }}\n          >\n            <Svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"1.5\"\n                d=\"M10 12 6 8l4-4\"\n              />\n            </Svg>\n          </ButtonChangeDate>\n          <ButtonChangeDate\n            direction={direction}\n            place={'right'}\n            onClick={() => {\n              setDirection('forvard');\n              onClickBtn(1, 'day');\n            }}\n          >\n            <Svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"1.5\"\n                d=\"m6 12 4-4-4-4\"\n              />\n            </Svg>\n          </ButtonChangeDate>\n        </ButtonsChangePeriodDiv>\n      </ButtonsContainer>\n      <List>\n        <ListItem>By Day</ListItem>\n        <ListItem>By Month</ListItem>\n      </List>\n    </PeriodPaginatorContainer>\n  );\n};\n\nexport default PeriodPaginatorStatistics;\n","import styled from 'styled-components';\n\nexport const ChartContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 40px;\n  padding: 45px 15px;\n\n  // border: 1px solid #e3f3ff;\n  border: var(--color-border-stat);\n\n  border-radius: 20px;\n\n  @media screen and (min-width: 768px) {\n    padding: 35px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    padding: 45px 40px;\n  }\n`;\n\n\n\n\n","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { BarChart, Bar, CartesianGrid, XAxis, YAxis } from 'recharts';\nimport { ChartContainer } from './StatisticsChart.styled';\n\nconst customBarLabel = ({ x, y, width, value }) => {\n  return (\n    <>\n      {value !== 0 && (\n        <text\n          x={x + width / 2}\n          y={y}\n          fill=\"var(--color-calendar-day)\"\n          // fill=\"#343434\"\n          fontWeight=\"500\"\n          textAnchor=\"middle\"\n          dy={-5}\n          style={{ fontSize: window.innerWidth >= 768 ? 14 : 10 }}\n        >{`${value}%`}</text>\n      )}\n    </>\n  );\n};\n\nexport const StatisticsChart = ({ data }) => {\n  const [chartWidth, setChartWidth] = useState(0);\n  const [chartHeight, setChartHeight] = useState(0);\n  const [chartBarSize, setChartBarSize] = useState(0);\n\n  useEffect(() => {\n    const handleResize = () => {\n      let newSize = 279;\n      let newHeight = 328;\n      let newBarSize = 22;\n\n      if (window.innerWidth >= 1440) {\n        newSize = 780;\n        newHeight = 351;\n        newBarSize = 27;\n      } else if (window.innerWidth >= 768) {\n        newSize = 576;\n        newHeight = 328;\n        newBarSize = 22;\n      }\n\n      setChartWidth(newSize);\n      setChartHeight(newHeight);\n      setChartBarSize(newBarSize);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    handleResize();\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return (\n    <ChartContainer>\n      <BarChart\n        width={chartWidth}\n        height={chartHeight}\n        data={data}\n        margin={{ top: 45, right: 0, bottom: 5, left: -15 }}\n        barGap=\"7%\"\n      >\n        <CartesianGrid\n          stroke=\"var(--color-border-stat-line)\"\n          vertical={false}\n        />\n        <Bar\n          dataKey=\"ByDay\"\n          fill=\"url(#pinkGradientFill)\"\n          label={customBarLabel}\n          barSize={chartBarSize}\n          radius={7}\n        />\n        <Bar\n          dataKey=\"ByMonth\"\n          fill=\"url(#blueGradientFill)\"\n          label={customBarLabel}\n          barSize={chartBarSize}\n          radius={7}\n        />\n        <defs>\n          <linearGradient\n            id=\"pinkGradientFill\"\n            x1=\"0%\"\n            y1=\"0%\"\n            x2=\"0%\"\n            y2=\"100%\"\n          >\n            <stop offset=\"0%\" stopColor=\"rgba(255, 210, 221, 0)\" />\n            <stop offset=\"100%\" stopColor=\"rgba(255, 210, 221, 1)\" />\n          </linearGradient>\n          <linearGradient\n            id=\"blueGradientFill\"\n            x1=\"0%\"\n            y1=\"0%\"\n            x2=\"0%\"\n            y2=\"100%\"\n          >\n            <stop offset=\"0%\" stopColor=\"rgba(62, 133, 243, 0)\" />\n            <stop offset=\"100%\" stopColor=\"rgba(62, 133, 243, 1)\" />\n          </linearGradient>\n        </defs>\n        <XAxis\n          dataKey=\"name\"\n          axisLine={{ stroke: 'transparent' }}\n          tickMargin={20}\n          tickSize={0}\n          tick={{\n            fontSize: window.innerWidth >= 768 ? 14 : 12,\n            fontWeight: '500',\n            fill: 'var(--color-calendar-day)',\n          }}\n        />\n        <YAxis\n          label={{\n            value: 'Tasks',\n            position: 'top',\n            dx: 4,\n            dy: -30,\n            style: {\n              fontSize: '14px',\n              fontWeight: '700',\n              fill: 'var(--color-calendar-day)',\n              // fill: '#343434',\n            },\n          }}\n          domain={[0, 100]}\n          ticks={[0, 20, 40, 60, 80, 100]}\n          axisLine={{ stroke: 'transparent' }}\n          tickMargin={20}\n          tickSize={0}\n          tick={{\n            fontSize: 14,\n            fontWeight: '500',\n            fill: 'var(--color-calendar-day)',\n          }}\n        />\n      </BarChart>\n    </ChartContainer>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { StatisticsSectionContainer } from './StatisticsSection.styled';\nimport PeriodPaginatorStatistics from './PaginatorStatistics/PaginatorStatistics';\nimport { StatisticsChart } from './StatisticsChart/StatisticsChart';\nimport { useDispatch } from 'react-redux';\nimport { editTitle } from 'redux/title/titleSlice';\nimport { fetchAllTasks } from 'redux/tasks/tasksOperation';\nimport { selectTasks } from 'redux/tasks/tasksSelectors';\nimport { useSelector } from 'react-redux';\nimport { format } from 'date-fns';\n\nconst StatisticsSection = () => {\n  // Текст заголовку цієї сторінки\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(editTitle('Statistics'));\n  });\n\n  const [date, setDate] = useState(new Date());\n  const currentDate = format(date, 'yyyy-MM-dd');\n  \n  const day = currentDate.slice(8, 10);\n  const month = currentDate.slice(5, 7);\n  const year = currentDate.slice(0, 4);\n\n  useEffect(() => {\n    dispatch(fetchAllTasks({ year, month, day }));\n  }, [dispatch, year, month, day]);\n  let tasksByMonth = useSelector(selectTasks);\n\n  // const date = '2023-09-04'; // умовна дата\n  const tasksByDay = tasksByMonth.filter(item => item.date === currentDate);\n\n  ///////////////////////////////////////////\n\n  //------ОБРОБКА ДАНИХ МІСЯЦЯ------//\n  // початкові стани змінних в яких зберігаємо кількості тасків місяця\n  // to-do, in-progress, done (нулі)\n  let mToDo = 0;\n  let mInP = 0;\n  let mDone = 0;\n\n  // перебираємо циклом і рахуємо кількість тасок to-do, in-progress, done в місяці\n  for (let item of tasksByMonth) {\n    if (item.category === 'to-do') {\n      mToDo += 1;\n    }\n    if (item.category === 'in-progress') {\n      mInP += 1;\n    }\n    if (item.category === 'done') {\n      mDone += 1;\n    }\n  }\n\n  // рахуємо залаьну кількість тасок в місяці\n  let allCountByM = tasksByMonth.length;\n\n  // рахуємо відсоток тасок в місяці і округлюємо до сотих\n  let percTodoM = mToDo === 0 ? 0 : ((mToDo / allCountByM) * 100).toFixed(0);\n  let percInprM = mInP === 0 ? 0 : ((mInP / allCountByM) * 100).toFixed(0);\n  let percDoneM = mDone === 0 ? 0 : ((mDone / allCountByM) * 100).toFixed(0);\n\n  //------ОБРОБКА ДАНИХ ДНЯ------//\n  // початкові стани змінних в яких зберігаємо кількості тасків дня\n  // to-do, in-progress, done (нулі)\n  let dToDo = 0;\n  let dInP = 0;\n  let dDone = 0;\n\n  // перебираємо циклoм і рахуємо кількість тасок to-do, in-progress, done в дні\n  for (let item of tasksByDay) {\n    if (item.category === 'to-do') {\n      dToDo += 1;\n    }\n    if (item.category === 'in-progress') {\n      dInP += 1;\n    }\n    if (item.category === 'done') {\n      dDone += 1;\n    }\n  }\n\n  // рахуємо залаьну кількість тасок в дні\n  let allCountByD = tasksByDay.length;\n\n  // рахуємо відсоток тасок в місяці і округлюємо до сотих\n  let percTodoD = dToDo === 0 ? 0 : ((dToDo / allCountByD) * 100).toFixed(0);\n  let percInprD = dInP === 0 ? 0 : ((dInP / allCountByD) * 100).toFixed(0);\n  let percDoneD = dDone === 0 ? 0 : ((dDone / allCountByD) * 100).toFixed(0);\n\n  //------ФОРМУЄМО ДАНІ ДЛЯ ГІСТОГРАМИ------//\n  let data = [\n    {\n      name: 'To Do',\n      ByDay: Number(percTodoD),\n      ByMonth: Number(percTodoM),\n    },\n    {\n      name: 'In Progress',\n      ByDay: Number(percInprD),\n      ByMonth: Number(percInprM),\n    },\n    {\n      name: 'Done',\n      ByDay: Number(percDoneD),\n      ByMonth: Number(percDoneM),\n    },\n  ];\n  \n\n  return (\n    <StatisticsSectionContainer>\n      <PeriodPaginatorStatistics setDate={setDate} date={date} />\n      <StatisticsChart data={data} />\n    </StatisticsSectionContainer>\n  );\n};\n\nexport default StatisticsSection;\n","import StatisticsSection from 'components/Statistics/StatisticsSection';\n\n\nconst StatisticsPage = () => {\n  return <StatisticsSection />;\n};\n\nexport default StatisticsPage;\n"],"names":["PeriodPaginatorDiv","styled","DisplayDataDiv","ButtonsChangePeriodDiv","Svg","ButtonChangeDate","border","direction","place","StatisticsSectionContainer","whiteColor","PeriodPaginatorContainer","ButtonsContainer","List","ListItem","StyledStatisticsDatepicker","primaryColor","date","setDate","useState","setDirection","onClickBtn","step","period","newDate","addDays","millisec","getTime","calendarStartDay","selected","onChange","dateFormat","onClick","xmlns","fill","strokeLinecap","strokeLinejoin","strokeWidth","d","ChartContainer","customBarLabel","x","y","width","value","fontWeight","textAnchor","dy","style","fontSize","window","innerWidth","StatisticsChart","data","chartWidth","setChartWidth","chartHeight","setChartHeight","chartBarSize","setChartBarSize","useEffect","handleResize","newSize","newHeight","newBarSize","addEventListener","removeEventListener","BarChart","height","margin","top","right","bottom","left","barGap","CartesianGrid","stroke","vertical","Bar","dataKey","label","barSize","radius","id","x1","y1","x2","y2","offset","stopColor","XAxis","axisLine","tickMargin","tickSize","tick","YAxis","position","dx","domain","ticks","dispatch","useDispatch","editTitle","Date","currentDate","format","day","slice","month","year","fetchAllTasks","tasksByMonth","useSelector","selectTasks","tasksByDay","filter","item","mToDo","mInP","mDone","category","allCountByM","length","percTodoM","toFixed","percInprM","percDoneM","dToDo","dInP","dDone","allCountByD","percTodoD","percInprD","percDoneD","name","ByDay","Number","ByMonth"],"sourceRoot":""}